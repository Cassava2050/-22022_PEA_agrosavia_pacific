---
title: "data analysis"
author: "Luis Fernando Delgado"
format: html
---

# Data analysis

## Load libraries

```{r options(digits=3), options(scipen = 999)}
rm(list = ls())
source("https://raw.githubusercontent.com/Cassava2050/PPD/main/utilities_tidy.R")
source("GG_functions.R")


trial_interest <- "pacific"
year_interest <- 2022
```

## master_data to save the results

```{r}
master_data <- list()
```

## Load the tidy data

```{r}
trial_set_number = 1
# all files in the folder
list_file = list.files(here::here("output"))
# tidy data of the trials interested
sel_file = list_file[str_detect(list_file, "_tidy_data4analysis_") &
                       str_detect(list_file,
                                  paste(year_interest, trial_interest, sep=""))]
# the data we will use
sel_file
sel_file_use = sel_file[1]

sel_file_use
trial1_tidy = read.csv(here::here("output", sel_file_use), header=TRUE,
                        stringsAsFactors = FALSE,
                        as.is=T,
                        check.names = FALSE)
if(trial_set_number == 1){
  trial_tidy_all = trial1_tidy
}

# remove empty cols

trial_tidy_all <- trial_tidy_all[, colSums(is.na(trial_tidy_all)) < nrow(trial_tidy_all)]
```

## Obtain all the trait information using a cloud file (gitHub) -------

```{r}
trait_all <-
  read.csv("https://raw.githubusercontent.com/lfdelgadom/standar_col_names_CB/main/standar_col_names.csv") %>%
  dplyr::select(analysis_col_name) %>%
  filter(str_detect(analysis_col_name, "obs_"))
trait_all_adj <- gsub("obs_", "", trait_all$analysis_col_name)
trait_all_adj = c(trait_all_adj,
                  "harvest_number_plan", "germination_perc",
                  "yield_ha_v2", "DM_yield_ha", "starch_content")
trait_all_adj <- gsub("-", "_", trait_all_adj)
```

## Meta info.

```{r}
meta_all <-
  read.csv("https://raw.githubusercontent.com/lfdelgadom/standar_col_names_CB/main/standar_col_names.csv") %>%
  dplyr::select(analysis_col_name) %>%
  filter(str_detect(analysis_col_name, "use_"))
meta_all_adj <- gsub("use_", "", meta_all$analysis_col_name)
meta_all_adj <- c(
  meta_all_adj,
  "check_released", "latitude", "longitude",
  "altitude", "department", "country",
  "ag_zone", "location_short"
)
```

## Select the observations for analysis

```{r}
names(trial_tidy_all) <- gsub("-", "_", names(trial_tidy_all))
analysis_trait <- names(trial_tidy_all)[names(trial_tidy_all) %in% trait_all_adj]
print("All the traits investigated:")
print(analysis_trait)
```

## Select the meta information for analysis

```{r}
meta_col <- names(trial_tidy_all)[names(trial_tidy_all) %in% meta_all_adj]
print("All the meta information:")
print(meta_col)
```

```{r}

# get rip of rep 1 because of low performace
trial_tidy_all <- trial_tidy_all %>% 
  mutate(yield_ha = ifelse(plot_name == "202074CQPEA_fran_rep1_GM214-62_4", NA, yield_ha)) 

trial_tidy_all$trial_name %>% unique()

# trial_tidy_all <- 
#   trial_tidy_all %>% filter(!trial_name %in% c("201784BCPRC_cpal", "201895BCPRC_cpal"))

 pop = "CQ"
#pop = "BC"
#pop = "both"
```

## Populations

```{r}

if(pop == "CQ") { 
    genotypes <- c("SM3553-27", "GM214-62", "SM3106-14", "Eco-Blanca", "COL1438_is_Llenerita")
    trial_tidy <- trial_tidy_all %>%
                  filter(!trial_name %in% c("2019113BCPRC_tuma", "201891BCPRC_tuma", "201890BCPRC_tuma", "201782BCPRC_tuma", "201889CQPRC_tuma")) %>%
                  filter(accession_name %in% genotypes)

} else if(pop == "both") {  
    trial_tidy <- trial_tidy_all

} else {
    genotypes <- c("SM3762-15", "SM3677-74", "GM3594-70", "GM3650-51", "Eco-Blanca", "COL1438_is_Llenerita")
    trial_tidy <- trial_tidy_all %>%
                  filter(!trial_name %in% c("2019112CQPRC_tuma", "201891BCPRC_tuma", "201890BCPRC_tuma", "201889CQPRC_tuma", "201781CQPRC_tuma", "2019113BCPRC_tuma")) %>%
                  filter(accession_name %in% genotypes)
}

unique(trial_tidy$trial_name)

```

## Evaluated clones

```{r}
trial_tidy$accession_name %>% unique() %>% as.data.frame() %>% 
  write.table("clipboard", sep = "\t", col.names = T, row.names = F)
```

## Check the SD of each trait

```{r}
trial_rm_sd <- remove_no_var_tidy(my_dat = trial_tidy,
                   analysis_trait = analysis_trait,
                   meta_info = meta_col)
master_data[[paste("mean_of_sd", sep = "_")]] = sd_mean
```

## Trait ideal

```{r}
no_traits_for_analysis <- c("stake_plant" , "planted_number_plot", 
                            "harvest_number", "root_weight_air", 
                            "root_weight_water", "harvest_number_plan",
                            "yield_ha_v2", "root_rot_perc", "root_rot_number",
                            "root_weight_commercial", "root_weight_plot",
                            "shoot_weight_plot", "germinated_number_plot",
                            "CAD_5mon", "CAD_7mon",	"CBB_5mon",		
                            "CBB_7mon",	"redspider_5mon1_3",		
                            "CAD_3mon",	"CBB_3mon",		
                            "frogskin1_5", "lodging1_3_6mon",	
                            "mites_7mon", "mites_3mon", "thrips1_5"
                            )

trait_ideal <- analysis_trait[!analysis_trait %in% no_traits_for_analysis]
trait_ideal <- trait_ideal[-1]
print("the trait ideal is:"); trait_ideal

sort(trait_ideal) %>% as.data.frame() %>% 
  write.table("clipboard", sep = "\t", col.names = T, row.names = F)
```

## AED boxplot

```{r}

trials <- unique(trial_rm_sd$trial_name)
i = 1
for(i in 1:length(trials)) {
  plot_bxp <- trial_rm_sd[trial_rm_sd$trial_name == trials[i], ] %>% 
  discard(~all(is.na(.) | . =="")) %>% 
  pivot_longer(
    cols = any_of(trait_ideal),
    names_to = "var",
    values_to = "values"
  ) %>%
  ggplot(aes(x = accession_name, y = values)) +
  facet_wrap(~var,
    scales = "free"
  ) +
  geom_boxplot(aes(shape = accession_name, fill = accession_name)) +
  labs(x = NULL, y = NULL, title = trials[i]) +
  #theme_xiaofei() +
  theme(
    axis.text.x = element_text(size = 8, vjust = 1),
    axis.text.y = element_text(size = 8),
    plot.title = element_text(color = "black"),
    strip.text.x = element_text(
      size = 5, face = "bold.italic")
  ) +
  theme_xiaofei()

  print(plot_bxp)
ggsave(paste("images\\boxplot", trial_interest, pop, trials[i], ".png", sep = "_"),
     units = "in", dpi = 300, width = 20, height = 16
  )
}
```

# Genotypic correlation (Phenotypic values)

```{r}
correlation <- gg_cor(
  colours = c("red", "white", "blue"),
  data = trial_rm_sd[ ,trait_ideal],
  label_size = 2
  )

plot(correlation)
ggsave(paste("images\\pheno_corr", trial_interest, pop, ".png", sep = "_"),
     plot = correlation, units = "in", dpi = 300, width = 12, height = 8
   )
```

## Check design experimental

### Agriutilities library

```{r}
my_dat <- trial_rm_sd %>% 
  add_column(block = NA) %>% mutate(block = as.factor(block)) 



results <- check_design_met(
  data = my_dat, 
  genotype = "accession_name",
  trial = "trial_name",
  traits = trait_ideal,
  rep = "rep_number",
  col = "col_number",
  row = "row_number",
  block = "block"
)

my_dat$trial_name %>% unique()

shared <- plot(results, type = "connectivity")

ggsave(paste('images\\shared_', trial_interest, ".png", sep = "_"),
        plot = shared, units = "in", dpi = 300, width = 8, height = 6)

summary <- results$summ_traits 

p1 <- summary %>% 
  ggplot(aes(x = traits , y = trial_name, label = round(miss_perc,2),  fill = miss_perc ))+
  geom_tile(color = "gray")+
  geom_text(color = "white")+
  theme_minimal(base_size = 13)+
  labs(title = "Percentage of missing values (exp/trait)", x = "", y = "") +
  theme(axis.text.x = element_text(hjust = 1 , angle = 45, size = 16),
        axis.text.y = element_text(size = 16))
p1
ggsave(paste("images\\missing_", trial_interest, pop, ".png", sep = "_"),
     plot = p1, units = "in", dpi = 300, width = 15, height = 6
   )
master_data[[paste("summ_traits", pop, sep = "_")]] <- summary



```

## AOV and post anova analysis

```{r}
library(agricolae)
library(broom)
# List of variables for ANOVA
variables <- trait_ideal[-c(1)]

# factor rep
my_dat$rep_number = as.factor(my_dat$rep_number)
my_dat$trial_name = as.factor(my_dat$trial_name)
my_dat$accession_name = as.factor(my_dat$accession_name)


# Run ANOVA for each variable using a for loop
for (variable in variables) {
  
  eqt_fixed <- reformulate(c("accession_name", 
                             "trial_name", "accession_name:trial_name", 
                             "rep_number"
                             # "row_fct", 
                             # "col_fct"
                             ), response = variable)
  
  # Run ANOVA and 
  anova_result <- aov(eqt_fixed, data = my_dat)
  
  summary(anova_result)
  
  out <- HSD.test(anova_result,"accession_name")
  
     
  out_trial <- HSD.test(anova_result,"trial_name")

  
  # Store the result in the list
  # anova tables
  master_data[[paste("aov", variable, pop, sep = "_") ]] <- 
    tidy(anova_result) #%>% 
    #mutate(across(where(is.double), round, 3)
           #)
  
  #HSD clones
  master_data[[paste("HSD_geno", variable, pop, sep = "_") ]] <- 
    out$groups %>% rownames_to_column("accession_name") %>% 
    pivot_longer(variable, names_to = "trait", values_to = "mean") %>% 
    mutate(across(where(is.double), round, 3))
  
  # HSD localities
  master_data[[paste("HSD_loca", variable, pop, sep = "_") ]] <- 
    out_trial$groups %>% rownames_to_column("trial_name") %>% 
    mutate(across(where(is.double), round, 3))
  
}


# ANOVA
ind <- grep("^aov", names(master_data))
master_data[ind] 

# accession_name HSD
ind_HSD <- grep("^HSD_geno", names(master_data))
master_data[ind_HSD] 

# trial_name HSD
loca_HSD <- grep("^HSD_loca", names(master_data))
master_data[loca_HSD]
```

## Mean Barplot

```{r, message=FALSE, warning=FALSE}
library(data.table)
mean_geno <- master_data[ind_HSD] %>% rbindlist()

mean_geno %>% ggplot(aes(x = fct_reorder(accession_name, trait), 
             y = mean)) +
  facet_wrap(~trait, scales = "free_y") +
  geom_col(col = "black") +
  scale_fill_jco() +
  geom_text(aes(label = groups), vjust = 1, col = 'white') +
  labs(x = NULL, y = " ") +
  theme_xiaofei() +
  theme(axis.text.x = element_text(vjust = 1))   

ggsave(paste("images\\mean", trial_interest, pop, ".png", sep = "_"),
     units = "in", dpi = 300, width = 15, height = 10
   )

```

## Bar groups with letter, sd and error bar

```{r}

my_dat %>% select(accession_name, all_of(variables)) 

# List of variables to calculate statistics for
#variables <- c("DM_gravity", "height_1st_branch", "yield_ha", "vigor1_5")

# Initialize an empty list to store the tables
summary_tables <- list()

for (var in variables) {
  summary_tables[[var]] <-my_dat %>%
    group_by(accession_name) %>%
    summarize(
      sd = sd(!!sym(var), na.rm = T),
      .groups = 'drop'  # to avoid the grouped df warning
    ) %>% add_column(trait = var)
}

# The pattern of names in master_data
master_names <- paste0("HSD_geno_", variables, "_CQ")

# Initialize an empty list for storing the joined data frames


for (i in seq_along(variables)) {
  # Construct the name of the data frame in master_data
  master_name <- master_names[i]
  
  # The corresponding table in summary_tables
  summary_table <- summary_tables[[variables[i]]]
  
  # Perform the left join and store the result in the joined_data list
  joined_data[[variables[i]]] <- master_data[[master_name]] %>%
    left_join(summary_table, join_by(accession_name, trait))
}

# save summary table

folder_output <- here::here("output//")
meta_file_name <- paste0(folder_output, paste("2022", trial_interest, "means_sd", pop, Sys.Date(), ".xlsx", sep = "_"))

write.xlsx(joined_data, file = meta_file_name)

## build plots

for(i in 1: length(joined_data)){
  
  # Select current dataframe
  current_df <- joined_data[[i]]
  
  # Set limits
  y_max = max(current_df$mean, na.rm = TRUE) * 1.6
  y_min = 0
  
  # Built barplot
    plot_box = ggplot(current_df, aes(x = fct_reorder(accession_name, -mean), 
                                      y = mean))+
      geom_col(col = "black") +
      geom_errorbar(aes(ymin=mean-sd, ymax=mean+sd), width=0.4) +
      coord_cartesian(ylim = c(y_min, y_max))+
      scale_fill_jco() + 
      geom_text(aes(label = groups), vjust = -0.3, hjust = -1, fontface = "bold") + 
      geom_text(aes(label = paste0("sd = ", round(sd, 2))), vjust = 6, hjust = 0.5, fontface = "bold") +
      labs(x = NULL, y = unique(current_df$trait)) + 
      theme_xiaofei() +
      theme(axis.text.x = element_text(vjust = 1)) 
    
    # Print out barplots
    plot(plot_box) 
    
#   Save barplots
ggsave(paste("images/", unique(current_df$trait), pop, trial_interest, ".png", sep = "_")  , plot_box, width = 6, height = 4)
}
```

## Save the master data results

```{r}
folder_output <- here::here("output//")
meta_file_name <- paste0(folder_output, paste("2022", trial_interest, "master_results", pop, Sys.Date(), ".xlsx", sep = "_"))

write.xlsx(master_data, file = meta_file_name)

# It is neccessary change some elements names from master_file
grep("^HSD_geno_root_number_commercial", names(master_data))
names(master_data)[18] <- "HSD_geno_root_number_com"

grep("^HSD_loca_root_number_commercial", names(master_data))
names(master_data)[19] <- "HSD_loca_root_number_com"


grep("^aov_root_number_non_commercial", names(master_data))
names(master_data)[20] <- "aov_root_number_non_com"

grep("^HSD_geno_root_number_non_commercial", names(master_data))
names(master_data)[21] <- "HSD_geno_root_number_non_com"

grep("^HSD_loca_root_number_non_commercial", names(master_data))
names(master_data)[22] <- "HSD_loca_root_number_non_com"

grep("^HSD_geno_root_constriction1_3", names(master_data))
names(master_data)[36] <- "HSD_geno_root_const_BC"

grep("^HSD_loca_root_constriction1_3", names(master_data))
names(master_data)[37] <- "HSD_loca_root_const_BC"


write.xlsx(master_data, file = meta_file_name)
```


# AMMI analysis

# AMMI analysis

```{r}
library(metan)

variables_ideal <- variables[!variables %in% c("lodging1_3", 
                                               "root_number_non_commercial", 
                                               "height_wt_leaf",
                                               "root_type1_5",
                                               "root_length1_3")]

ammi_results <- list()

for (i in 1:length(variables_ideal)) {
  current_variable <- variables_ideal[i]
  
  # Make sure to pass the variable dynamically to the AMMI model function
  ammi_model <- performs_ammi(my_dat, trial_name, accession_name, rep_number, !!rlang::sym(current_variable))
  
  # Use double bracket indexing for dynamic variable names
  ammi_results[[paste0("AMMI_", current_variable)]] <- ammi_model[[current_variable]]$ANOVA
  
  # Plot the scores and add the custom theme
  a <- plot_scores(ammi_model, size.text.env = 3) + theme_xiaofei()
  a_2 <- plot_scores(ammi_model, type = 2, polygon = TRUE, size.text.env = 3) + theme_xiaofei()
  
  # Fix the typo in 'size.tex.env', it should be 'size.text.env', and use TRUE instead of T
  a_3 <- plot_scores(ammi_model, type = 4, repulsion = 2, repel = TRUE,
                     size.text.env = 3, max_overlaps = 14, x.lab = "Environment PC1", 
                     y.lab = current_variable, title = FALSE) + theme_xiaofei() +
            theme(legend.position = "none") 
  
  # Save the plots with corrected file path construction
  ggsave(paste0("images/AMMI2_", current_variable, pop, trial_interest, ".png"), 
         plot = a_2, width = 6, height = 4)
  
  ggsave(paste0("images/AMMI1_", current_variable, pop, trial_interest, ".png"), 
         plot = a, width = 6, height = 4)
  
  ggsave(paste0("images/stability_", current_variable, pop, trial_interest, ".png"), 
         plot = a_3, width = 6, height = 4)
}
variables_ideal
```
## Save the master data AMMI results

```{r}
meta_file_name <- paste0(folder_output, paste("2022", trial_interest, "ammi_results", pop, Sys.Date(), ".xlsx", sep = "_"))

write.xlsx(ammi_results, file = meta_file_name)
```


